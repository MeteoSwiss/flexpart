#!/bin/bash
#+==============================================================================
# Store NWP input data for FLEXPART in user store
#
# Author:      Pirmin Kaufmann
#-==============================================================================

# Settings equal to settings in test-fp
# -------------------------------------
# Since July 2025, STORE as defined by the system login script
# already points to /store/mch, we want /store_new/mch
# until the migration is complete.
export STORE=/store_new/mch
# File for automatic job numbering
job_no_file=$HOME/.flexpart_job
# Root directory for job directories (see also test-fp script)
job_root=$SCRATCH/flexpart/job
# File with some metadata missing in nc file (see also test-fp script)
plot_info_file=plot_info
# -------------------------------------

# Function
# --------
function display_help {
    # Show script usage
    cat >&2 << EOF

Copy model output files as FLEXPART input to user store.
       
Usage: $tag [OPTION]... BASETIME

  BASETIME              Base time of model run to save to user store.

Mandatory arguments to long options are mandatory for short options too.
  -d, --debug           print out additional debug output
  -h, --help            display this help and exit
  -n, --dry-run         print commands without executing them
  -r, --resol=RESOL     resolution, one of: i1, i2, f, g

EOF
} # function display_help

# Initialization
# --------------
tag=$(basename $0)

# Parse arguments
# ---------------
iarg=0
while (( $# > 0 )) ; do
    case "$1" in
        -d | --debug)
            debug=yes
            ;;
        -n | --dry-run)
            dry_run=yes
            ;;
        -h | --help)
            display_help
            exit
            ;;
        -r | --resol*)
            # Mandatory option argument with or without =
            if [[ "$1" == *=* ]] ; then
                resol="${1#*=}"
            else
                (( $# > 1 )) && shift && resol="$1"
            fi
            ;;
        -*)
            echo $tag: "Unknown option: $1"
            exit 1
            ;;
        *)
            (( iarg++ ))
            case $iarg in
            1)
                basetime="$1"
                ;;
            *)  # Additional arguments
                echo $tag: "Too many arguments: $1"
                exit 1
                ;;
            esac
            ;;
    esac
    shift
done

# Check argument: Base time
if [[ -z $basetime ]] ; then
	echo $tag: "Missing argument: Base time."
	exit 1
fi

# Check option: Resolution --resol
if [[ -z $resol ]] ; then
    echo $tag: "Missing option: Resolution."
    echo $tag: "Use option -r, --resol=RESOL to specify"
    exit 1
fi
case "$resol" in
    i1) 
        case_store=$STORE/msopr/$USER/CASES/FLEXPART-I1E-CTRL
        resol_exp='6??'
	    ;;
    i2) 
        case_store=$STORE/msopr/$USER/CASES/FLEXPART-I2E
        resol_exp='7??'
	    ;;
    f) 
        case_store=$STORE/msopr/$USER/CASES/FLEXPART-IFS-EUROPE
        resol_exp='FIE'
	    ;;
    g) 
        case_store=$STORE/msopr/$USER/CASES/FLEXPART-IFS-GLOBAL
        resol_exp='FIP'
	    ;;
    *)
        echo $tag: "Unknown resolution: $resol"
        echo $tag: "Valid options are: i1, i2, f, g"
        exit 1
        ;;
esac

# Option -n, --dry-run
if [[ -n $dry_run ]] ; then
    # Enable escape sequences in echo with option -e
    exe_cmd="echo -e \e[07;32m \e[0m  "
    echo $tag: "INFO: Option --dry-run set," \
	"printing commands without executing them."
    echo -n $tag: "Skipped commands are marked with: "
    $exe_cmd
fi

# Start Processing
# ----------------

# Search source directory on tasna
yymmddhh=${basetime:2:8}
source_dir=$(ssh tasna "ls -d /opr/osm/opr/wd/${yymmddhh}_${resol_exp}" 2>/dev/null)
if [[ -z $source_dir ]] ; then
    echo $tag: "No source directory found in: tasna:/opr/osm/opr/wd/${yymmddhh}_${resol_exp}"
    exit 1
fi
case_dir=$case_store/$(basename $source_dir)

# Create target directories
echo "Creating target directories for case: $(basename $case_dir)"
$exe_cmd mkdir -p $case_dir/grib
if [[ ${resol:0:1} == "i" ]] ; then
    $exe_cmd mkdir -p $case_dir/fxshare
fi

# Copy grib files from tasna to case directory
echo $tag: "Saving NWP input from: $source_dir to $case_dir"
$exe_cmd scp tasna:$source_dir/grib/dispc* $case_dir/grib/
if [[ ${resol} == "f" ]] ; then
    $exe_cmd scp tasna:$source_dir/grib/dispf* $case_dir/grib/
fi
if [[ ${resol:0:1} == "i" ]] ; then
    $exe_cmd scp tasna:$source_dir/fxshare/_FXINP_lfrf[0-9][0-9][0-9][0-9]0000_000c $case_dir/fxshare/
    $exe_cmd scp tasna:$source_dir/fxshare/_FXINP_lfrf[0-9][0-9][0-9][0-9]0000_000  $case_dir/fxshare/
fi

exit 0
