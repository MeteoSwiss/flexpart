pipeline {
    agent {label 'podman'}

    options {

        disableConcurrentBuilds()
        buildDiscarder(logRotator(artifactDaysToKeepStr: '7', artifactNumToKeepStr: '7',
                                  daysToKeepStr: '7', numToKeepStr: '7'))
        timeout(time: 48, unit: 'HOURS')
    }
    environment {
        CR_ALL = 'docker-all-nexus.meteoswiss.ch'
        SPACK_TAG='dev_PR-12'
        TAG = "flexpart-poc/flexpart"
        VERSION = sh(
            returnStdout: true, 
            script: 'if [ "$BRANCH_NAME" = "main" ]; then echo -n latest; else echo -n dev_${BRANCH_NAME}; fi'
            )
        IMAGE_INTERN = "docker-intern-nexus.meteoswiss.ch/$TAG:$VERSION"
        IMAGE_PUBLIC = "docker-public-nexus.meteoswiss.ch/$TAG:$VERSION"
        DOCKER_CONFIG = "$workspace/.docker"
        REGISTRY_AUTH_FILE = "$workspace/.containers/auth.json"
        HTTP_PROXY = 'http://proxy.meteoswiss.ch:8080/'
    }
    stages {
        stage('Deploy container') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'openshift-nexus',
                                          passwordVariable: 'NXPASS',
                                          usernameVariable: 'NXUSER'), 
                                 usernamePassword(credentialsId: 'github app credential for the meteoswiss-apn github organization',
                                          usernameVariable: 'GITHUB_APP',
                                          passwordVariable: 'GITHUB_ACCESS_TOKEN')]) {
                    sh '''
                        echo $(id -u):$(id -g)
                        echo \$NXPASS | podman login docker-intern-nexus.meteoswiss.ch -u \$NXUSER --password-stdin
                        echo \$NXPASS | podman login docker-public-nexus.meteoswiss.ch -u \$NXUSER --password-stdin

                        test -d ctx && rm -rf ctx
                        mkdir ctx

                        cp docker/Dockerfile docker/spack.yaml docker/entrypoint.sh docker/upload_s3.py docker/IGBP_int1.dat docker/sandbox_generator.py docker/genconf.yml docker/fdb_schema ctx/
                        podman build --format docker --pull --build-arg TOKEN_FLEXPART=$GITHUB_ACCESS_TOKEN --build-arg container_registry=\$CR_ALL --build-arg spack_tag=\$SPACK_TAG -t \$IMAGE_INTERN ctx
                        podman push \$IMAGE_INTERN
                        podman tag \$IMAGE_INTERN \$IMAGE_PUBLIC
                        if [ "$VERSION" = "latest" ]; then podman push \$IMAGE_PUBLIC; fi
                    '''
                }
            }
            post {
                cleanup {
                    sh """
                    rm -rf ctx
                    podman image rm -f \$IMAGE_INTERN
                    podman image rm -f \$IMAGE_PUBLIC
                    podman logout docker-intern-nexus.meteoswiss.ch || true
                    podman logout docker-public-nexus.meteoswiss.ch || true
                    """
                }
            }
        }
        stage('Test container') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'openshift-nexus',
                                          passwordVariable: 'NXPASS',
                                          usernameVariable: 'NXUSER')]) {
                    sh '''
                        echo \$NXPASS | podman login docker-intern-nexus.meteoswiss.ch -u \$NXUSER --password-stdin
                        echo \$NXPASS | podman login docker-public-nexus.meteoswiss.ch -u \$NXUSER --password-stdin

                        cd jenkins && ./test.sh
                        '''
                }
            }
            post {
                cleanup {
                    sh """
                    rm -rf ctx
                    podman image rm -f \$IMAGE_INTERN
                    podman rm -i flexpart-container-test-$BRANCH_NAME
                    """
                }
            }
        }
    }
    post {
        always {
            echo "Build stage complete"
        }
        failure {
            echo "Build failed"
            emailext(subject: "${currentBuild.fullDisplayName}: ${currentBuild.currentResult}",
                     body: """Job '${env.JOB_NAME} #${env.BUILD_NUMBER}': ${env.BUILD_URL}""",
                     recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']])
        }
        success {
            echo "Build succeeded"
        }
    }
}
